# File: tools/animo_video_generator.py
# This file contains the core Python logic for the "Animo Video Generator" tool.
# It makes calls to the Animo API to request a video and returns it as an MP4 blob.

from collections.abc import Generator
from typing import Any, Mapping
import requests # For making HTTP requests to the Animo API
import io

from dify_plugin import Tool
from dify_plugin.entities.tool import ToolInvokeMessage


class AnimoVideoGeneratorTool(Tool):
    """
    A Dify Tool Plugin to generate videos using the Animo API.
    It takes specific parameters to request a video and returns the generated
    MP4 video file as a blob.
    """

    def _invoke(self, tool_parameters: Mapping[str, Any]) -> Generator[ToolInvokeMessage]:
        """
        Invokes the Animo API to generate an MP4 video.

        Args:
            tool_parameters (Mapping[str, Any]): A dictionary containing the tool's input parameters.
                Expected keys:
                - "prompt" (str): The creative prompt or request for video generation. (required)
                - "duration" (int, optional): Desired duration of the video in seconds.
                - "style" (str, optional): The artistic style for the video (e.g., "anime", "realistic", "cartoon").
                - "resolution" (str, optional): Desired video resolution (e.g., "1920x1080", "1280x720").

        Yields:
            ToolInvokeMessage: A file BLOB message containing the MP4 video.
        """

        # Retrieve Animo API key from Dify credentials
        animo_api_key = self.runtime.credentials.get("animo_api_key")
        if not animo_api_key:
            yield self.create_text_message("Animo API key is not configured. Please set it in plugin credentials.")
            return

        # Animo API endpoint for video generation (THIS IS A PLACEHOLDER)
        # You MUST replace this with the actual URL of your Animo API's video generation endpoint.
        animo_api_endpoint = self.runtime.credentials.get("animo_api_endpoint")
        if not animo_api_endpoint:
            yield self.create_text_message("Animo API endpoint is not configured. Please set it in plugin credentials.")
            return
        
        # Extract parameters from tool_parameters
        prompt = tool_parameters.get("prompt")
        if not prompt:
            yield self.create_text_message("Missing required parameter: 'prompt' for video generation.")
            return

        duration = tool_parameters.get("duration", 10)  # Default duration 10 seconds
        style = tool_parameters.get("style", "cinematic")
        resolution = tool_parameters.get("resolution", "1280x720")

        # Construct payload for Animo API request
        payload = {
            "prompt": prompt,
            "duration": duration,
            "style": style,
            "resolution": resolution
            # Add any other parameters your Animo API expects
        }

        headers = {
            "Authorization": f"Bearer {animo_api_key}",
            "Content-Type": "application/json"
            # Add any other headers your Animo API requires
        }

        yield self.create_text_message(f"Requesting video from Animo API with prompt: '{prompt}'...")

        try:
            # Make the API call to Animo
            response = requests.post(animo_api_endpoint, json=payload, headers=headers, stream=True)
            response.raise_for_status()  # Raise an exception for HTTP errors (4xx or 5xx)

            # Check if the response content type is video/mp4
            content_type = response.headers.get("Content-Type")
            if not content_type or not content_type.startswith("video/mp4"):
                yield self.create_text_message(f"Animo API did not return an MP4 video. Received Content-Type: {content_type}. Please check the API response format.")
                return
            
            # Read the video content in chunks to handle potentially large files
            video_data = io.BytesIO()
            for chunk in response.iter_content(chunk_size=8192):
                video_data.write(chunk)
            
            video_blob = video_data.getvalue()

            # Yield the video as a BLOB message
            yield self.create_blob_message(
                blob=video_blob,
                meta={
                    "mime_type": "video/mp4",
                    "filename": f"animo_generated_video_{prompt[:20].replace(' ', '_')}.mp4",
                    "description": f"An MP4 video generated by Animo API based on prompt: '{prompt}'"
                }
            )
            yield self.create_text_message("Video generation complete and returned successfully.")

        except requests.exceptions.RequestException as e:
            yield self.create_text_message(f"Error connecting to Animo API: {e}")
        except Exception as e:
            yield self.create_text_message(f"An unexpected error occurred during video generation: {e}")